/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Inventario_Facturacion_Presupuesto;

import inicio_sesion.Menu_Principal;
import java.awt.event.KeyEvent;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JasperViewer;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import prg.Conexion;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.sql.Connection;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.util.JRLoader;
import prg.conector;

/**
 *
 * @author User
 */
public class Facturacion extends javax.swing.JFrame {

    Conexion conexion;
    private Connection cn;
    ResultSet rs;
    Statement st;
    SimpleDateFormat fecha = new SimpleDateFormat("dd/MM/yyyy");
    DecimalFormat separador = new DecimalFormat("#,##0");
    int ban = 0;
    int subtotal = 0;
    int total = 0;
    int cod = 0;
    int montorecarga = 0;
    int efectivo = 0;
    int cambio = 0;

    public Facturacion() {
        initComponents();
        conexion = Conexion.getInstanciaConexion();
        conexion.openConnection();
        setTitle("REALIZAR VENTAS");
        this.setLocationRelativeTo(null);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jcMousePanel1 = new jcMousePanel.jcMousePanel();
        jLabel1 = new javax.swing.JLabel();
        txt_usuario_venta = new javax.swing.JTextField();
        txt_fecha_venta = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txt_nro_venta = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txt_stock_disponible = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txt_codigo_barras = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txt_descri_producto = new javax.swing.JTextField();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        txt_montorecarga = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_ventas = new javax.swing.JTable();
        txt_total = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        bt_grabar = new javax.swing.JButton();
        bt_nuevo = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        txt_cambio = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        txt_efectivo = new javax.swing.JTextField();
        txt_subtotal = new javax.swing.JTextField();
        bt_quitar = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        bt_volver1 = new javax.swing.JButton();
        bt_no_venta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        getContentPane().setLayout(null);

        jcMousePanel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/6476-verde.jpg"))); // NOI18N
        jcMousePanel1.setVisibleLogo(false);
        jcMousePanel1.setLayout(null);

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Usuario:");
        jcMousePanel1.add(jLabel1);
        jLabel1.setBounds(40, 30, 50, 15);

        txt_usuario_venta.setEnabled(false);
        jcMousePanel1.add(txt_usuario_venta);
        txt_usuario_venta.setBounds(100, 20, 200, 40);

        txt_fecha_venta.setEnabled(false);
        jcMousePanel1.add(txt_fecha_venta);
        txt_fecha_venta.setBounds(100, 70, 120, 40);

        jLabel2.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Fecha:");
        jcMousePanel1.add(jLabel2);
        jLabel2.setBounds(50, 80, 40, 15);

        txt_nro_venta.setEnabled(false);
        jcMousePanel1.add(txt_nro_venta);
        txt_nro_venta.setBounds(300, 70, 120, 40);

        jPanel1.setLayout(null);

        jLabel8.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel8.setText("Codigo de Barras");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(50, 10, 100, 20);

        txt_stock_disponible.setEnabled(false);
        jPanel1.add(txt_stock_disponible);
        txt_stock_disponible.setBounds(540, 30, 110, 30);

        jLabel9.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel9.setText("Descripci√≥n");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(280, 10, 70, 20);

        txt_codigo_barras.setEnabled(false);
        txt_codigo_barras.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_codigo_barrasKeyPressed(evt);
            }
        });
        jPanel1.add(txt_codigo_barras);
        txt_codigo_barras.setBounds(20, 30, 170, 30);

        jLabel10.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel10.setText("Precio");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(460, 10, 40, 20);

        jLabel11.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel11.setText("Stock Disponible");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(550, 10, 100, 20);

        txt_descri_producto.setEnabled(false);
        jPanel1.add(txt_descri_producto);
        txt_descri_producto.setBounds(200, 30, 210, 30);

        txt_cantidad.setEnabled(false);
        txt_cantidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_cantidadActionPerformed(evt);
            }
        });
        txt_cantidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_cantidadKeyPressed(evt);
            }
        });
        jPanel1.add(txt_cantidad);
        txt_cantidad.setBounds(660, 30, 110, 30);

        txt_precio.setEnabled(false);
        jPanel1.add(txt_precio);
        txt_precio.setBounds(420, 30, 110, 30);

        jLabel12.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel12.setText("MONTO RECARGA");
        jPanel1.add(jLabel12);
        jLabel12.setBounds(800, 10, 110, 20);

        jLabel15.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel15.setText("Cantidad");
        jPanel1.add(jLabel15);
        jLabel15.setBounds(690, 10, 50, 20);

        txt_montorecarga.setEnabled(false);
        txt_montorecarga.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt_montorecargaKeyPressed(evt);
            }
        });
        jPanel1.add(txt_montorecarga);
        txt_montorecarga.setBounds(800, 30, 100, 40);

        jcMousePanel1.add(jPanel1);
        jPanel1.setBounds(20, 120, 930, 80);

        tbl_ventas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo de Barras", "Descripcion", "Precio", "Cantidad"
            }
        ));
        jScrollPane1.setViewportView(tbl_ventas);

        jcMousePanel1.add(jScrollPane1);
        jScrollPane1.setBounds(20, 210, 760, 170);

        txt_total.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txt_total.setEnabled(false);
        jcMousePanel1.add(txt_total);
        txt_total.setBounds(220, 440, 160, 50);

        jLabel13.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(255, 255, 255));
        jLabel13.setText("TOTAL");
        jcMousePanel1.add(jLabel13);
        jLabel13.setBounds(270, 400, 76, 40);

        bt_grabar.setFont(new java.awt.Font("Roboto Black", 0, 14)); // NOI18N
        bt_grabar.setForeground(new java.awt.Color(51, 204, 0));
        bt_grabar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/cobro1.png"))); // NOI18N
        bt_grabar.setText("COBRAR");
        bt_grabar.setEnabled(false);
        bt_grabar.setFocusCycleRoot(true);
        bt_grabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_grabarActionPerformed(evt);
            }
        });
        jcMousePanel1.add(bt_grabar);
        bt_grabar.setBounds(680, 440, 130, 40);

        bt_nuevo.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        bt_nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/Nuevo.png"))); // NOI18N
        bt_nuevo.setText("NUEVA VENTA");
        bt_nuevo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_nuevo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_nuevoActionPerformed(evt);
            }
        });
        jcMousePanel1.add(bt_nuevo);
        bt_nuevo.setBounds(800, 220, 130, 80);

        jLabel14.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(255, 255, 255));
        jLabel14.setText("EFECTIVO:");
        jcMousePanel1.add(jLabel14);
        jLabel14.setBounds(410, 410, 120, 30);

        txt_cambio.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txt_cambio.setEnabled(false);
        jcMousePanel1.add(txt_cambio);
        txt_cambio.setBounds(540, 460, 130, 40);

        jLabel16.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("CAMBIO:");
        jcMousePanel1.add(jLabel16);
        jLabel16.setBounds(430, 460, 100, 30);

        jLabel17.setFont(new java.awt.Font("Roboto Black", 0, 24)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("SUB-TOTAL");
        jcMousePanel1.add(jLabel17);
        jLabel17.setBounds(40, 400, 140, 30);

        txt_efectivo.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        txt_efectivo.setEnabled(false);
        txt_efectivo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_efectivoKeyReleased(evt);
            }
        });
        jcMousePanel1.add(txt_efectivo);
        txt_efectivo.setBounds(540, 410, 130, 40);

        txt_subtotal.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        txt_subtotal.setEnabled(false);
        jcMousePanel1.add(txt_subtotal);
        txt_subtotal.setBounds(30, 440, 160, 50);

        bt_quitar.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        bt_quitar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/close.png"))); // NOI18N
        bt_quitar.setText("QUITAR PRODUCTO");
        bt_quitar.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_quitar.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_quitar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_quitarActionPerformed(evt);
            }
        });
        jcMousePanel1.add(bt_quitar);
        bt_quitar.setBounds(790, 310, 150, 60);

        jLabel5.setFont(new java.awt.Font("Roboto Medium", 0, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Nro. Venta:");
        jcMousePanel1.add(jLabel5);
        jLabel5.setBounds(230, 80, 70, 20);

        bt_volver1.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        bt_volver1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/atrasss.png"))); // NOI18N
        bt_volver1.setText("VOLVER");
        bt_volver1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_volver1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_volver1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_volver1ActionPerformed(evt);
            }
        });
        jcMousePanel1.add(bt_volver1);
        bt_volver1.setBounds(820, 10, 120, 70);

        bt_no_venta.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        bt_no_venta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/limpiar.png"))); // NOI18N
        bt_no_venta.setText("CANCELAR");
        bt_no_venta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bt_no_venta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bt_no_venta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_no_ventaActionPerformed(evt);
            }
        });
        jcMousePanel1.add(bt_no_venta);
        bt_no_venta.setBounds(830, 430, 100, 60);

        getContentPane().add(jcMousePanel1);
        jcMousePanel1.setBounds(0, 0, 1050, 630);

        setBounds(0, 0, 969, 558);
    }// </editor-fold>//GEN-END:initComponents

    private void bt_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_nuevoActionPerformed

        conexion.openConnection();
// Verificar si la caja est√° abierta
        if (!cajaEstaAbierta()) {
            JOptionPane.showMessageDialog(this, "Debe abrir la caja antes de realizar una venta", "Advertencia", JOptionPane.WARNING_MESSAGE);
            Apertura_Caja fac = new Apertura_Caja();
            fac.setVisible(true);
        } else {
            Conexion.getInstanciaConexion().deshabilitar_btn3(bt_nuevo, bt_grabar);
            Conexion.getInstanciaConexion().autonumerico("idventas", "ventas", txt_nro_venta);
            txt_fecha_venta.setText(fecha.format(new Date()));
            txt_usuario_venta.setText(Menu_Principal.txt_menu_usuario.getText());
            txt_codigo_barras.setEnabled(true);
            txt_codigo_barras.requestFocus();
            txt_efectivo.setEnabled(true);
            txt_montorecarga.setEnabled(true);

            ban = 1;

        }
    }//GEN-LAST:event_bt_nuevoActionPerformed

    private void txt_codigo_barrasKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_codigo_barrasKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            consultarProductoPorCodigoDeBarras();
        }
    }//GEN-LAST:event_txt_codigo_barrasKeyPressed

    private void txt_cantidadKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_cantidadKeyPressed
        
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            agregarProductoATabla();

        }
    }//GEN-LAST:event_txt_cantidadKeyPressed

    private void bt_quitarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_quitarActionPerformed

        int filaSeleccionada = tbl_ventas.getSelectedRow();

        if (filaSeleccionada != -1) {
            String tipoProducto = (String) tbl_ventas.getValueAt(filaSeleccionada, 0);

            // Verificar si la fila seleccionada es una recarga
            if ("453".equals(tipoProducto)) {
                int montoRecarga = (int) tbl_ventas.getValueAt(filaSeleccionada, 2); // Usar la columna del precio unitario para obtener el monto de recarga
                total -= montoRecarga; // Restar el monto de la recarga del total
            } else {
                int precioUnitario = (int) tbl_ventas.getValueAt(filaSeleccionada, 2);
                int cantidad = (int) tbl_ventas.getValueAt(filaSeleccionada, 3);
                total -= precioUnitario * cantidad; // Restar el precio total del producto
            }

            txt_total.setText(Integer.toString(total));
            DefaultTableModel model = (DefaultTableModel) tbl_ventas.getModel();
            model.removeRow(filaSeleccionada);

            // Actualizar el subtotal
            int rowCount = model.getRowCount();
            if (rowCount > 0) {
                // Si la √∫ltima fila es una recarga, actualizar el subtotal con ese monto
                String ultimoTipoProducto = (String) model.getValueAt(rowCount - 1, 0);
                if ("453".equals(ultimoTipoProducto)) {
                    int ultimoMontoRecarga = (int) model.getValueAt(rowCount - 1, 2);
                    txt_subtotal.setText(Integer.toString(ultimoMontoRecarga));
                } else {
                    int ultimoPrecioUnitario = (int) model.getValueAt(rowCount - 1, 2);
                    int ultimoCantidad = (int) model.getValueAt(rowCount - 1, 3);
                    int nuevoSubtotal = ultimoPrecioUnitario * ultimoCantidad;
                    txt_subtotal.setText(Integer.toString(nuevoSubtotal));
                }
            } else {
                txt_subtotal.setText("0");
            }
        }


        /*int filaSeleccionada = tbl_ventas.getSelectedRow();
        
        if (filaSeleccionada != -1) {
            int precioUnitario = (int) tbl_ventas.getValueAt(filaSeleccionada, 2);
            int cantidad = (int) tbl_ventas.getValueAt(filaSeleccionada, 3);
            total -= precioUnitario * cantidad;
            txt_total.setText(Integer.toString(total));
            DefaultTableModel model = (DefaultTableModel) tbl_ventas.getModel();
            model.removeRow(filaSeleccionada);
            int rowCount = model.getRowCount();
            if (rowCount > 0) {
                int ultimoPrecio = (int) model.getValueAt(rowCount - 1, 2);
                int ultimoCantidad = (int) model.getValueAt(rowCount - 1, 3);
                int nuevoSubtotal = ultimoPrecio * ultimoCantidad;
                txt_subtotal.setText(Integer.toString(nuevoSubtotal));
            } else {
                txt_subtotal.setText("0");
            }
        }*/
    }//GEN-LAST:event_bt_quitarActionPerformed

    private void txt_efectivoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_efectivoKeyReleased
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            int efectivo = Integer.parseInt(txt_efectivo.getText());
            if (efectivo >= total) {
                int cambio = efectivo - total;
                txt_cambio.setText(Integer.toString(cambio));
                bt_grabar.setEnabled(true);
            } else {
                txt_cambio.setText("0");
            }

        }
    }//GEN-LAST:event_txt_efectivoKeyReleased

    private void bt_grabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_grabarActionPerformed

        if (txt_efectivo.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes ingresar el efectivo antes de finalizar la venta", "Atencion!!", JOptionPane.WARNING_MESSAGE);
            txt_efectivo.requestFocus();
            return;
        }
        if (txt_cambio.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes de presionar enter para obtener el cambio", "Atencion!!", JOptionPane.WARNING_MESSAGE);
            txt_efectivo.requestFocus();
            return;
        }
        if (tbl_ventas.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Debe ingresar al menos un producto en la venta.");
            return;
        }
        String vcod = txt_nro_venta.getText();
        int confirmacion = JOptionPane.showConfirmDialog(null, "¬øDesea grabar la venta?", "Confirmar Venta", JOptionPane.YES_NO_OPTION);
        if (confirmacion != JOptionPane.YES_OPTION) {
            return;
        }
        try {
            int idVenta = Integer.parseInt(txt_nro_venta.getText());
            java.sql.Date fecha = java.sql.Date.valueOf(convertir_fecha(txt_fecha_venta.getText()));
            String usuario = txt_usuario_venta.getText();
            int total = Integer.parseInt(txt_total.getText());
            int subTotal = Integer.parseInt(txt_subtotal.getText());
            int efectivo = Integer.parseInt(txt_efectivo.getText());
            int cambio = Integer.parseInt(txt_cambio.getText());

            // Guardar en la tabla 'ventas'
            PreparedStatement pInsertVenta = Conexion.getInstanciaConexion().obtenerRutaConeccion()
                    .prepareStatement("INSERT INTO ventas(idventas, fecha, usuario, total, sub_total, efectivo, cambio, estado) VALUES (?, ?, ?, ?, ?, ?, ?, ?) returning idventas", Statement.RETURN_GENERATED_KEYS);
            pInsertVenta.setInt(1, idVenta);
            pInsertVenta.setDate(2, fecha);
            pInsertVenta.setString(3, usuario);
            pInsertVenta.setInt(4, total);
            pInsertVenta.setInt(5, subtotal);
            pInsertVenta.setInt(6, efectivo);
            pInsertVenta.setInt(7, cambio);
            pInsertVenta.setString(8, "Activo");
            int opcion = pInsertVenta.executeUpdate();
            if (opcion == 1) {
                ResultSet rs = (ResultSet) pInsertVenta.getGeneratedKeys();
                rs.next();
                int id_venta = rs.getInt(1);
                cod = id_venta;

            }
            DefaultTableModel model = (DefaultTableModel) tbl_ventas.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                int idProducto = obtenerIdProductoDesdeTabla(i);
                String codigoBarras = model.getValueAt(i, 0).toString();
                String descripcion = model.getValueAt(i, 1).toString();
                int precioUnitario = Integer.parseInt(model.getValueAt(i, 2).toString());
                int cantidadVendida = Integer.parseInt(model.getValueAt(i, 3).toString());
                int stockDisponible = obtenerStockDisponibleDesdeBD(idProducto);
                PreparedStatement pInsertDetalle = Conexion.getInstanciaConexion().obtenerRutaConeccion()
                        .prepareStatement("INSERT INTO ventas_detalles(idventas, idproducto, cod_barras, descripcion,"
                                + " precio_unitario, stock_disponible, cantidad) VALUES (?, ?, ?, ?, ?, ?, ?);");
                pInsertDetalle.setInt(1, idVenta);
                pInsertDetalle.setInt(2, idProducto);
                pInsertDetalle.setString(3, codigoBarras);
                pInsertDetalle.setString(4, descripcion);
                pInsertDetalle.setInt(5, precioUnitario);
                pInsertDetalle.setInt(6, stockDisponible);
                pInsertDetalle.setInt(7, cantidadVendida);
                pInsertDetalle.executeUpdate();
                // Actualizar el stock en la tabla 'productos'
                int nuevoStock = stockDisponible - cantidadVendida;
                PreparedStatement pUpdateStock = Conexion.getInstanciaConexion().obtenerRutaConeccion()
                        .prepareStatement("UPDATE productos SET stock_disponible = ? WHERE idproducto = ?;");
                pUpdateStock.setInt(1, nuevoStock);
                pUpdateStock.setInt(2, idProducto);
                pUpdateStock.executeUpdate();
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al consultar la base de datos: " + e.getMessage(), "Error de Venta", JOptionPane.ERROR_MESSAGE);
            deshacer_transaccion();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error al realizar la venta: " + e.getMessage(), "Error de Venta", JOptionPane.ERROR_MESSAGE);
            deshacer_transaccion();
        }
        bt_nuevo.setEnabled(true);
        bt_nuevo.requestFocus();

        try {
            ImprimirFactura(cod);
            limpiarCampos();
            limpiarTablaVista();
        } catch (SQLException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_bt_grabarActionPerformed

    private void bt_volver1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_volver1ActionPerformed
        conexion.closeConnection();
        dispose();
    }//GEN-LAST:event_bt_volver1ActionPerformed

    private void bt_no_ventaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bt_no_ventaActionPerformed

        Object[] options = {"Limpiar campos", "Cancelar venta"};
        int respuesta = JOptionPane.showOptionDialog(null, "¬øDesea cancelar?", "Confirmaci√≥n", JOptionPane.DEFAULT_OPTION, JOptionPane.WARNING_MESSAGE, null, options, options[0]);

        if (respuesta == 0) {
            // Limpiar algunos campos
            txt_codigo_barras.setText("");
            txt_descri_producto.setText("");
            txt_precio.setText("");
            txt_stock_disponible.setText("");
            txt_cantidad.setText("");
            txt_montorecarga.setText("");

            txt_codigo_barras.requestFocus();
        } else if (respuesta == 1) {
            // Limpiar todos los campos y establecer el id en 0
            limpiarCampos();
            limpiarTablaVista();
            DefaultTableModel tab = (DefaultTableModel) tbl_ventas.getModel();
            tab.setRowCount(0);
            inhabilitar_campos();
            total = 0;
            subtotal = 0;
        }

    }//GEN-LAST:event_bt_no_ventaActionPerformed

    private void txt_montorecargaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_montorecargaKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            agregarRecargaATabla();
        }
    }//GEN-LAST:event_txt_montorecargaKeyPressed

    private void txt_cantidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_cantidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_cantidadActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Facturacion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Facturacion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bt_grabar;
    private javax.swing.JButton bt_no_venta;
    private javax.swing.JButton bt_nuevo;
    private javax.swing.JButton bt_quitar;
    private javax.swing.JButton bt_volver1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private jcMousePanel.jcMousePanel jcMousePanel1;
    private javax.swing.JTable tbl_ventas;
    private javax.swing.JTextField txt_cambio;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_codigo_barras;
    private javax.swing.JTextField txt_descri_producto;
    private javax.swing.JTextField txt_efectivo;
    private javax.swing.JTextField txt_fecha_venta;
    private javax.swing.JTextField txt_montorecarga;
    private javax.swing.JTextField txt_nro_venta;
    private javax.swing.JTextField txt_precio;
    private javax.swing.JTextField txt_stock_disponible;
    private javax.swing.JTextField txt_subtotal;
    private javax.swing.JTextField txt_total;
    public static javax.swing.JTextField txt_usuario_venta;
    // End of variables declaration//GEN-END:variables
    private int obtenerIdProductoDesdeCodigoBarras(String codigoBarras) {
        int idProducto = -1;
        try {
            PreparedStatement pGetProductId = Conexion.getInstanciaConexion().obtenerRutaConeccion()
                    .prepareStatement("SELECT idproducto FROM productos WHERE cod_barras = ?;");
            pGetProductId.setString(1, codigoBarras);
            ResultSet resultSet = pGetProductId.executeQuery();

            if (resultSet.next()) {
                idProducto = resultSet.getInt("idproducto");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return idProducto;
    }

    private void limpiarCampos() {
        DefaultTableModel tab = (DefaultTableModel) tbl_ventas.getModel();
        tab.setRowCount(0);
        txt_nro_venta.setText("");
        txt_fecha_venta.setText("");
        txt_usuario_venta.setText("");
        txt_codigo_barras.setText("");
        txt_descri_producto.setText("");
        txt_precio.setText("");
        txt_stock_disponible.setText("");
        txt_montorecarga.setText("");
        txt_total.setText("");
        txt_subtotal.setText("");
        txt_efectivo.setText("");
        txt_cambio.setText("");
        subtotal = 0;
        total = 0;
        montorecarga = 0;
        efectivo = 0;
        cambio = 0;
        txt_codigo_barras.setEnabled(false);
        txt_montorecarga.setEnabled(false);
        txt_cantidad.setEnabled(false);
        txt_nro_venta.setSelectionStart(0);
        bt_nuevo.setEnabled(true);

    }

    private void limpiarTablaVista() {
        DefaultTableModel model = (DefaultTableModel) tbl_ventas.getModel();
        model.setRowCount(0);
    }

    private int obtenerIdProductoDesdeTabla(int fila) {
        DefaultTableModel model = (DefaultTableModel) tbl_ventas.getModel();
        String codigoBarras = model.getValueAt(fila, 0).toString();
        int idProducto = obtenerIdProductoDesdeCodigoBarras(codigoBarras);
        return idProducto;
    }

    private void consultarProductoPorCodigoDeBarras() {
        try {
            Conexion.getInstanciaConexion().listar_datos("SELECT cod_barras, descripcion, precio_venta, stock_disponible, estado "
                    + "FROM productos "
                    + "WHERE cod_barras = '" + txt_codigo_barras.getText().trim() + "'"
                    + " OR descripcion ILIKE '%" + txt_codigo_barras.getText().trim() + "%'");

            if (Conexion.getInstanciaConexion().rt.next()) {
                String estado = Conexion.getInstanciaConexion().rt.getString("estado");

                if (estado.equals("Activo")) {
                    txt_descri_producto.setText(Conexion.getInstanciaConexion().rt.getString("descripcion"));
                    txt_precio.setText(Conexion.getInstanciaConexion().rt.getString("precio_venta"));
                    txt_stock_disponible.setText(Conexion.getInstanciaConexion().rt.getString("stock_disponible"));
                    txt_codigo_barras.setText(Conexion.getInstanciaConexion().rt.getString("cod_barras"));
                    txt_cantidad.setEnabled(true);
                    txt_cantidad.requestFocus();
                } else {
                    JOptionPane.showMessageDialog(null, "El producto est√° inactivo",
                            "Error",
                            JOptionPane.ERROR_MESSAGE);
                    txt_codigo_barras.requestFocus();
                    txt_codigo_barras.setSelectionStart(0);
                }
            } else {
                JOptionPane.showMessageDialog(null, "C√≥digo ingresado no existe",
                        "Error",
                        JOptionPane.ERROR_MESSAGE);
                txt_codigo_barras.requestFocus();
                txt_codigo_barras.setSelectionStart(0);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al recuperar producto" + e);
        }
    }

    private void agregarProductoATabla() {

        try {
            int cantidad = Integer.parseInt(txt_cantidad.getText());
            int precioUnitario = Integer.parseInt(txt_precio.getText().replace(",", "").trim());
            int montoTotalProducto = cantidad * precioUnitario;

            DefaultTableModel model = (DefaultTableModel) tbl_ventas.getModel();
            model.addRow(new Object[]{
                txt_codigo_barras.getText(),
                txt_descri_producto.getText(),
                precioUnitario,
                cantidad,
                montoTotalProducto
            });
            total += montoTotalProducto;
            txt_total.setText(Integer.toString(total));
            subtotal = montoTotalProducto;
            txt_subtotal.setText(Integer.toString(subtotal));
            txt_codigo_barras.setText("");
            txt_descri_producto.setText("");
            txt_precio.setText("");
            txt_stock_disponible.setText("");
            txt_cantidad.setText("");
            txt_codigo_barras.requestFocus();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Ingrese una cantidad v√°lida", "Error", JOptionPane.ERROR_MESSAGE);
            txt_cantidad.requestFocus();
        }
    }

    private void agregarRecargaATabla() {
        int cantidad = Integer.parseInt(txt_cantidad.getText());
        int montoRecarga = Integer.parseInt(txt_montorecarga.getText().replace(",", "").trim());

        // Suponiendo que no hay comisi√≥n y el monto de recarga es el precio final
        DefaultTableModel model = (DefaultTableModel) tbl_ventas.getModel();
        model.addRow(new Object[]{
            txt_codigo_barras.getText(),
            txt_descri_producto.getText(),// Descripci√≥n gen√©rica para la recarga
            montoRecarga, // El monto de recarga act√∫a como precio unitario
            txt_cantidad.getText(), // La cantidad siempre es 1 para una recarga
            montoRecarga

        });
        total += montoRecarga;
        txt_total.setText(Integer.toString(total));
        subtotal = montoRecarga;
        txt_subtotal.setText(Integer.toString(subtotal));

        txt_codigo_barras.setText("");
        txt_descri_producto.setText("");
        txt_precio.setText("");
        txt_stock_disponible.setText("");
        txt_cantidad.setText("");
        txt_montorecarga.setText("");
        txt_codigo_barras.requestFocus();
        // No necesitas actualizar el subtotal ya que es una recarga √∫nica
        // Limpia los campos si es necesario y devuelve el foco al campo deseado
    }

    private void deshacer_transaccion() {
        try {
            Conexion.getInstanciaConexion().obtenerRutaConeccion().rollback();
        } catch (Exception e) {

        }
    }

    private String convertir_fecha(String text) {
        String dia = "", mes = "", anho = "";
        dia = text.substring(0, 2);
        mes = text.substring(3, 5);
        anho = text.substring(6, 10);
        text = anho + "-" + mes + "-" + dia;
        return text;
    }

    private int obtenerStockDisponibleDesdeBD(int idProducto) {
        int stockDisponible = -1;
        try {
            PreparedStatement pGetStock = Conexion.getInstanciaConexion().obtenerRutaConeccion()
                    .prepareStatement("SELECT stock_disponible FROM productos WHERE idproducto = ?;");
            pGetStock.setInt(1, idProducto);
            ResultSet resultSet = pGetStock.executeQuery();

            if (resultSet.next()) {
                stockDisponible = resultSet.getInt("stock_disponible");
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return stockDisponible;
    }

    /* public void ImprimirFactura(int valor) throws SQLException {
        try (Connection cn = conector.getConexion()) {

            Map parametro = new HashMap();
            parametro.put("num", valor);
            JasperReport jr = (JasperReport) JRLoader.loadObject(getClass().getResource("/reportes_formularios/ticket_ventas.jasper"));
            JasperPrint j;
            System.out.println("se va a usar el reporte");
            System.out.println(cod);
            j = JasperFillManager.fillReport(jr, parametro, cn);
            JasperPrintManager.printReport(j, false); //
            JasperViewer jv = new JasperViewer(j, false);
            jv.setVisible(true);
            jv.setExtendedState(MAXIMIZED_BOTH);
        } catch (JRException e) {
            JOptionPane.showMessageDialog(null, "Error al mostrar el reporte" + e);
        }
    }*/
    public void ImprimirFactura(int valor) throws SQLException {
        Connection cn = null;
        try {
            cn = conector.getConexion();
            Map parametro = new HashMap();
            parametro.put("num", valor);
            JasperReport jr = (JasperReport) JRLoader.loadObject(getClass().getResource("/reportes_formularios/ticket_ventas.jasper"));
            JasperPrint j = JasperFillManager.fillReport(jr, parametro, cn);

            if (j.getPages().size() > 0) { // Verifica si el reporte tiene p√°ginas
                JasperPrintManager.printReport(j, false); // Imprime el reporte
                JOptionPane.showMessageDialog(null, "Imprimiendo recibo");
            } else {
                JOptionPane.showMessageDialog(null, "No se pudo imprimir el recibo, el documento no tiene p√°ginas");
            }
        } catch (JRException e) {
            JOptionPane.showMessageDialog(null, "No se pudo imprimir el recibo: " + e.getMessage());
            e.printStackTrace();
        }
    }

    private void inhabilitar_campos() {
        txt_codigo_barras.setEnabled(false);
        txt_cambio.setEnabled(false);
        txt_cantidad.setEnabled(false);
        txt_descri_producto.setEnabled(false);
        txt_efectivo.setEnabled(false);

    }

    boolean cajaEstaAbierta() {
        boolean resultado = false;
        try {
            st = Conexion.getInstanciaConexion().obtenerRutaConeccion().createStatement();
            rs = st.executeQuery("select estado FROM apertura_cierre_caja ORDER BY idapertura DESC LIMIT 1");
            if (rs.next()) {
                String estado = rs.getString("estado");
                if (estado.equals("Activo")) {
                    resultado = true;
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error al recuperar apertura" + e);
            e.printStackTrace();
        }
        return resultado;
    }


}
